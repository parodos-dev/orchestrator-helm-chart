{{- $ns := .Values.global.orchestrator.namespace }}
{{ if .Values.global.orchestrator.devmode }}
{{- $namespace := (lookup "v1" "Namespace" "" $ns) }}
{{- if $namespace }}
# Namespace exist, do nothing.
{{- else }}
apiVersion: v1
kind: Namespace
metadata:
  name: {{ $ns }}
{{- end }}
---  
apiVersion: sonataflow.org/v1alpha08
kind: SonataFlowPlatform
metadata:
  name: sonataflow-platform
  namespace: {{ $ns }}
spec:
  build:
    template:
      resources:
        requests:
          memory: {{ .Values.global.orchestrator.sonataPlatform.resources.requests.memory }}
          cpu: {{ .Values.global.orchestrator.sonataPlatform.resources.requests.cpu }}
        limits:
          memory: {{ .Values.global.orchestrator.sonataPlatform.resources.limits.memory }}
          cpu: {{ .Values.global.orchestrator.sonataPlatform.resources.limits.cpu }}
  services:
    dataIndex:
      enabled: true
    jobService:
      enabled: true
{{ else }}
apiVersion: sonataflow.org/v1alpha08
kind: SonataFlowPlatform
metadata:
  name: sonataflow-platform
  namespace: {{ $ns }}
spec:
  build:
    template:
      resources:
        requests:
          memory: {{ .Values.global.orchestrator.sonataPlatform.resources.requests.memory }}
          cpu: {{ .Values.global.orchestrator.sonataPlatform.resources.requests.cpu }}
        limits:
          memory: {{ .Values.global.orchestrator.sonataPlatform.resources.limits.memory }}
          cpu: {{ .Values.global.orchestrator.sonataPlatform.resources.limits.cpu }}
  services:
    dataIndex:
      enabled: true
      podTemplate:
        container:
          image: {{ .Values.global.orchestrator.sonataPlatform.dataIndex.image }} 
      persistence:
        postgresql:
          secretRef:
            name: {{ .Values.global.postgres.authSecret.name }}
            userKey: {{ .Values.global.postgres.authSecret.userKey }}
            passwordKey: {{ .Values.global.postgres.authSecret.passwordKey }}
          serviceRef:
            name: {{ .Values.global.postgres.serviceName }}
            namespace: {{ .Values.global.postgres.serviceNamespace }}
    jobService:
      enabled: true
      podTemplate:
        container:
          image: {{ .Values.global.orchestrator.sonataPlatform.jobService.image }} 
      persistence:
        postgresql:
          secretRef:
            name: {{ .Values.global.postgres.authSecret.name }}
            userKey: {{ .Values.global.postgres.authSecret.userKey }}
            passwordKey: {{ .Values.global.postgres.authSecret.passwordKey }}
          serviceRef:
            name: {{ .Values.global.postgres.serviceName }}
            namespace: {{ .Values.global.postgres.serviceNamespace }}
{{ end }}            
---
apiVersion: sonataflow.org/v1alpha08
kind: SonataFlowClusterPlatform
metadata:
  name: cluster-platform
spec:
  platformRef:
    name: sonataflow-platform
    namespace: {{ $ns }}
---
{{- if or .Values.global.orchestrator.deployWorkflow .Values.global.orchestrator.devmode }}
apiVersion: v1
data:
  greeting.sw.input-schema.json: |
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "language": {
          "title": "Language",
          "description": "Language to greet",
          "type": "string",
          "enum": ["English", "Spanish"],
          "default": "English"
        }
      }
    }
  greeting.sw.yaml: |
    id: greeting
    version: '1.0'
    specVersion: '1.0'
    name: Greeting workflow
    description: YAML based greeting workflow
    expressionLang: jsonpath
    dataInputSchema: "greeting.sw.input-schema.json"
    start: ChooseOnLanguage
    functions:
      - name: greetFunction
        type: custom
        operation: sysout
    states:
      - name: ChooseOnLanguage
        type: switch
        dataConditions:
          - condition: "${$.[?(@.language  == 'English')]}"
            transition: GreetInEnglish
          - condition: "${$.[?(@.language  == 'Spanish')]}"
            transition: GreetInSpanish
        defaultCondition:
          transition: GreetInEnglish
      - name: GreetInEnglish
        type: inject
        data:
          greeting: 'Hello from YAML Workflow, '
        transition: GreetPerson
      - name: GreetInSpanish
        type: inject
        data:
          greeting: 'Saludos desde YAML Workflow, '
        transition: GreetPerson
      - name: GreetPerson
        type: operation
        actions:
          - name: greetAction
            functionRef:
              refName: greetFunction
              arguments:
                message: "$.greeting $.name"
        end:
          terminate: true
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: 01-greeting-resources
  namespace: {{ $ns }}
---
{{- $greetingImage := "" }}
  {{- range .Values.global.orchestrator.sonataflows }}
    {{- if eq .name "greeting" }}
      {{- $greetingImage = .image }}
    {{- end }}
  {{- end }}
apiVersion: sonataflow.org/v1alpha08
kind: SonataFlow
metadata:
  annotations:
    sonataflow.org/description: YAML based greeting workflow
    sonataflow.org/expressionLang: jsonpath
    sonataflow.org/profile: prod
    sonataflow.org/version: "1.0"
  creationTimestamp: null
  labels:
    app: greeting
    sonataflow.org/workflow-app: greeting
    backstage.io/kubernetes-id: greeting
  name: greeting
  namespace: {{ $ns }}
spec:
  flow:
    annotations:
      - workflow-type/infrastructure
    dataInputSchema:
      failOnValidationErrors: true
      schema: greeting.sw.input-schema.json
    functions:
      - name: greetFunction
        operation: sysout
        type: custom
    start:
      stateName: ChooseOnLanguage
    states:
      - dataConditions:
          - condition: ${$.[?(@.language  == 'English')]}
            transition:
              nextState: GreetInEnglish
          - condition: ${$.[?(@.language  == 'Spanish')]}
            transition:
              nextState: GreetInSpanish
        defaultCondition:
          transition:
            nextState: GreetInEnglish
        name: ChooseOnLanguage
        type: switch
      - data:
          greeting: 'Hello from YAML Workflow, '
        name: GreetInEnglish
        transition:
          nextState: GreetPerson
        type: inject
      - data:
          greeting: 'Saludos desde YAML Workflow, '
        name: GreetInSpanish
        transition:
          nextState: GreetPerson
        type: inject
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                message: $.greeting $.name
              invoke: sync
              refName: greetFunction
            name: greetAction
        end:
          terminate: true
        name: GreetPerson
        type: operation
  podTemplate:
    container:
      resources: {}
      image: {{ $greetingImage }}
  resources:
    configMaps:
      - configMap:
          name: 01-greeting-resources
        workflowPath: specs
{{- end }}
