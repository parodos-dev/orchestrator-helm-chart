{{- if .Values.serverlessOperator.enabled }}
  {{- $unmanagedNamespaceExists := include "unmanaged-resource-exists" (list "v1" "Namespace" "" .Values.serverlessOperator.subscription.namespace .Release.Name .Capabilities.APIVersions) }}
  {{- if and (eq $unmanagedNamespaceExists "false") .Values.serverlessOperator.enabled }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.serverlessOperator.subscription.namespace }}
---
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: serverless-operator-group
  namespace: {{ .Values.serverlessOperator.subscription.namespace }}
spec: {}
  {{- end }}
  {{- $unmanagedSubscriptionExists := include "unmanaged-resource-exists" (list "operators.coreos.com/v1alpha1" "Subscription" .Values.serverlessOperator.subscription.namespace "serverless-operator" .Release.Name .Capabilities.APIVersions ) }}
  {{- if eq $unmanagedSubscriptionExists "false" }}
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: serverless-operator
  namespace: {{ .Values.serverlessOperator.subscription.namespace }}
spec:
  channel: {{ .Values.serverlessOperator.subscription.channel }}
  installPlanApproval: Automatic
  name: {{ .Values.serverlessOperator.subscription.name }}
  source: redhat-operators
  sourceNamespace: openshift-marketplace
  {{- end }}
  {{- $unmanagedNamespaceExists := include "unmanaged-resource-exists" (list "v1" "Namespace" "" "knative-serving" .Release.Name .Capabilities.APIVersions) }}
  {{- if eq $unmanagedNamespaceExists "false" }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: knative-serving
  {{- end }}
  {{- $unmanagedNamespaceExists := include "unmanaged-resource-exists" (list "v1" "Namespace" "" "knative-eventing" .Release.Name .Capabilities.APIVersions) }}
  {{- if eq $unmanagedNamespaceExists "false" }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: knative-eventing
  {{- end }}
  {{- $unmanagedKnativeEventingExists := include "unmanaged-resource-exists" (list "operator.knative.dev/v1beta1" "KnativeEventing" "knative-eventing" "knative-eventing" .Release.Name .Capabilities.APIVersions) }}
  {{- if eq $unmanagedKnativeEventingExists "false" }}
---
apiVersion: operator.knative.dev/v1beta1
kind: KnativeEventing
metadata:
  name: knative-eventing
  namespace: knative-eventing
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-fail
    "helm.sh/hook-weight": "2" # Is created after the job to wait for the crd to be available
spec:
  Registry:
{{ include "wait-for-crd-available" (dict "releaseName" .Release.Name "releaseNamespace" .Release.Namespace "apiGroup" "operator.knative.dev" "kind" "knativeeventings") }}
{{ include "delete-cr-on-uninstall" (dict "releaseName" .Release.Name "releaseNamespace" .Release.Namespace "apiGroup" "operator.knative.dev" "kind" "knativeeventings" "targetNamespace" "knative-eventing" "resourceName" "knative-eventing") }}
---
apiVersion: operator.knative.dev/v1beta1
kind: KnativeServing
metadata:
  name: knative-serving
  namespace: knative-serving
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-fail
    "helm.sh/hook-weight": "2" # Is created after the job to wait for the crd to be available
spec:
  controller-custom-certs:
    name: ""
    type: ""
  registry: {}
{{ include "wait-for-crd-available" (dict "releaseName" .Release.Name "releaseNamespace" .Release.Namespace "apiGroup" "operator.knative.dev" "kind" "knativeservings") }}
{{ include "delete-cr-on-uninstall" (dict "releaseName" .Release.Name "releaseNamespace" .Release.Namespace "apiGroup" "operator.knative.dev" "kind" "knativeservings" "targetNamespace" "knative-serving" "resourceName" "knative-serving") }}
  {{- end }}
{{- end }}